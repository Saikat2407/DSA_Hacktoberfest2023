63. Unique Paths II 

PS: You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time. An obstacle and space are marked as 1 or 0 respectively in the grid. 
A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

PS link: https://leetcode.com/problems/unique-paths-ii/description/

// solution :
 BRUTE FORCE (time complexity: exponential)

class Solution {
public:
    int solve(vector<vector<int>>& obstacleGrid ,int n,int m){
        if(n==0 && m==0) return 1;
        if(n<0 || m<0) return 0;
        if(n>=0 && m>=0 && obstacleGrid[n][m]==1) return 0;
        int up=solve(obstacleGrid,n-1,m);
        int left =solve(obstacleGrid,n,m-1);
        return left+up;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        return solve(obstacleGrid,m-1,n-1);
    }
}; 

MEMOIZATION (Time Complexity: O(N*M))

class Solution {
public:
    int solve(vector<vector<int>>& obstacleGrid ,int n,int m, vector<vector<int>> &dp){
        if(n==0 && m==0) return 1;
        if(n<0 || m<0) return 0;
        if(dp[n][m]!=-1) return dp[n][m];
        if(n>=0 && m>=0 && obstacleGrid[n][m]==1) return 0;
        int up=solve(obstacleGrid,n-1,m,dp);
        int left =solve(obstacleGrid,n,m-1,dp);
        return dp[n][m]=left+up;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(obstacleGrid,m-1,n-1,dp);
    }
};

TABULATION (Time Complexity: O(N*M))

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1) dp[i][j]=0;
                else if(i==0 && j==0) dp[i][j]=1;
                else{
                    int up=0,left=0;
                    if(i>0) up=dp[i-1][j];
                    if(j>0) left=dp[i][j-1];
                    dp[i][j]=up+left;
                }
            }
        }
        return dp[m-1][n-1];
    }
};


